// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int          @id @default(autoincrement())
  loginId         String       @unique @db.VarChar(20)
  loginPw         String
  nickname        String       @db.VarChar(20)
  houseName       String       @db.VarChar(20)
  friends         Friend[]     @relation("frinedUser")
  friendsRelation Friend[]     @relation("userFriend")
  books           Book[]
  musics          Music[]
  travels         Travel[]
  photos          Photo[]
  bookLike        BookLike[]
  musicLike       MusicLike[]
  travelLike      TravelLike[]
  photoLike       PhotoLike[]
  todos           ToDo[]
}

model Friend {
  user     User @relation(fields: [userId], references: [id], name: "frinedUser")
  userId   Int
  friend   User @relation(fields: [friendId], references: [id], name: "userFriend")
  friendId Int
  accept   Int

  @@id([userId, friendId])
}

model Book {
  id     Int        @id @default(autoincrement())
  user   User       @relation(fields: [userId], references: [id])
  userId Int
  title  String     @db.VarChar(100)
  body   String     @db.Text
  likes  BookLike[]
}

model BookLike {
  user   User @relation(fields: [userId], references: [id])
  book   Book @relation(fields: [bookId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId Int
  bookId Int

  @@id([userId, bookId])
}

model Music {
  id     Int         @id @default(autoincrement())
  user   User        @relation(fields: [userId], references: [id])
  userId Int
  title  String      @db.VarChar(100)
  body   String      @db.Text
  likes  MusicLike[]
}

model MusicLike {
  user    User  @relation(fields: [userId], references: [id])
  music   Music @relation(fields: [musicId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId  Int
  musicId Int

  @@id([userId, musicId])
}

model Travel {
  id     Int          @id @default(autoincrement())
  user   User         @relation(fields: [userId], references: [id])
  userId Int
  title  String       @db.VarChar(100)
  body   String       @db.Text
  likes  TravelLike[]
}

model TravelLike {
  user     User   @relation(fields: [userId], references: [id])
  travel   Travel @relation(fields: [travelId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId   Int
  travelId Int

  @@id([userId, travelId])
}

model Photo {
  id     Int          @id @default(autoincrement())
  user   User         @relation(fields: [userId], references: [id])
  userId Int
  title  String       @db.VarChar(100)
  body   String       @db.Text
  likes  PhotoLike[]
  images PhotoImage[]
}

model PhotoLike {
  user    User  @relation(fields: [userId], references: [id])
  photo   Photo @relation(fields: [photoId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId  Int
  photoId Int

  @@id([userId, photoId])
}

model PhotoImage {
  id      Int    @id @default(autoincrement())
  photo   Photo  @relation(fields: [photoId], references: [id])
  photoId Int
  image   String
}

model ToDo {
  id     Int      @id @default(autoincrement())
  user   User     @relation(fields: [userId], references: [id])
  date   DateTime @db.Date
  quest  String
  userId Int
  finish Boolean  @default(false)
}
